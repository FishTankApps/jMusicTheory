package com.fishtankapps.musictheory.pitch;

@SuppressWarnings("unused")
public enum Pitch {

	                             C_NATURAL_n1, C_SHARP_n1, C_DOUBLE_SHARP_n1,
	D_DOUBLE_FLAT_n1, D_FLAT_n1, D_NATURAL_n1, D_SHARP_n1, D_DOUBLE_SHARP_n1,
	E_DOUBLE_FLAT_n1, E_FLAT_n1, E_NATURAL_n1, E_SHARP_n1, E_DOUBLE_SHARP_n1,
	F_DOUBLE_FLAT_n1, F_FLAT_n1, F_NATURAL_n1, F_SHARP_n1, F_DOUBLE_SHARP_n1,
	G_DOUBLE_FLAT_n1, G_FLAT_n1, G_NATURAL_n1, G_SHARP_n1, G_DOUBLE_SHARP_n1,
	A_DOUBLE_FLAT_n1, A_FLAT_n1, A_NATURAL_n1, A_SHARP_n1, A_DOUBLE_SHARP_n1,
	B_DOUBLE_FLAT_n1, B_FLAT_n1, B_NATURAL_n1, B_SHARP_n1, B_DOUBLE_SHARP_n1,
	
	C_DOUBLE_FLAT_0, C_FLAT_0, C_NATURAL_0, C_SHARP_0, C_DOUBLE_SHARP_0,
	D_DOUBLE_FLAT_0, D_FLAT_0, D_NATURAL_0, D_SHARP_0, D_DOUBLE_SHARP_0,
	E_DOUBLE_FLAT_0, E_FLAT_0, E_NATURAL_0, E_SHARP_0, E_DOUBLE_SHARP_0,
	F_DOUBLE_FLAT_0, F_FLAT_0, F_NATURAL_0, F_SHARP_0, F_DOUBLE_SHARP_0,
	G_DOUBLE_FLAT_0, G_FLAT_0, G_NATURAL_0, G_SHARP_0, G_DOUBLE_SHARP_0,
	A_DOUBLE_FLAT_0, A_FLAT_0, A_NATURAL_0, A_SHARP_0, A_DOUBLE_SHARP_0,
	B_DOUBLE_FLAT_0, B_FLAT_0, B_NATURAL_0, B_SHARP_0, B_DOUBLE_SHARP_0,

	C_DOUBLE_FLAT_1, C_FLAT_1, C_NATURAL_1, C_SHARP_1, C_DOUBLE_SHARP_1,
	D_DOUBLE_FLAT_1, D_FLAT_1, D_NATURAL_1, D_SHARP_1, D_DOUBLE_SHARP_1,
	E_DOUBLE_FLAT_1, E_FLAT_1, E_NATURAL_1, E_SHARP_1, E_DOUBLE_SHARP_1,
	F_DOUBLE_FLAT_1, F_FLAT_1, F_NATURAL_1, F_SHARP_1, F_DOUBLE_SHARP_1,
	G_DOUBLE_FLAT_1, G_FLAT_1, G_NATURAL_1, G_SHARP_1, G_DOUBLE_SHARP_1,
	A_DOUBLE_FLAT_1, A_FLAT_1, A_NATURAL_1, A_SHARP_1, A_DOUBLE_SHARP_1,
	B_DOUBLE_FLAT_1, B_FLAT_1, B_NATURAL_1, B_SHARP_1, B_DOUBLE_SHARP_1,
	
	C_DOUBLE_FLAT_2, C_FLAT_2, C_NATURAL_2, C_SHARP_2, C_DOUBLE_SHARP_2,
	D_DOUBLE_FLAT_2, D_FLAT_2, D_NATURAL_2, D_SHARP_2, D_DOUBLE_SHARP_2,
	E_DOUBLE_FLAT_2, E_FLAT_2, E_NATURAL_2, E_SHARP_2, E_DOUBLE_SHARP_2,
	F_DOUBLE_FLAT_2, F_FLAT_2, F_NATURAL_2, F_SHARP_2, F_DOUBLE_SHARP_2,
	G_DOUBLE_FLAT_2, G_FLAT_2, G_NATURAL_2, G_SHARP_2, G_DOUBLE_SHARP_2,
	A_DOUBLE_FLAT_2, A_FLAT_2, A_NATURAL_2, A_SHARP_2, A_DOUBLE_SHARP_2,
	B_DOUBLE_FLAT_2, B_FLAT_2, B_NATURAL_2, B_SHARP_2, B_DOUBLE_SHARP_2,
	
	C_DOUBLE_FLAT_3, C_FLAT_3, C_NATURAL_3, C_SHARP_3, C_DOUBLE_SHARP_3,
	D_DOUBLE_FLAT_3, D_FLAT_3, D_NATURAL_3, D_SHARP_3, D_DOUBLE_SHARP_3,
	E_DOUBLE_FLAT_3, E_FLAT_3, E_NATURAL_3, E_SHARP_3, E_DOUBLE_SHARP_3,
	F_DOUBLE_FLAT_3, F_FLAT_3, F_NATURAL_3, F_SHARP_3, F_DOUBLE_SHARP_3,
	G_DOUBLE_FLAT_3, G_FLAT_3, G_NATURAL_3, G_SHARP_3, G_DOUBLE_SHARP_3,
	A_DOUBLE_FLAT_3, A_FLAT_3, A_NATURAL_3, A_SHARP_3, A_DOUBLE_SHARP_3,
	B_DOUBLE_FLAT_3, B_FLAT_3, B_NATURAL_3, B_SHARP_3, B_DOUBLE_SHARP_3,
	
	C_DOUBLE_FLAT_4, C_FLAT_4, C_NATURAL_4, C_SHARP_4, C_DOUBLE_SHARP_4,
	D_DOUBLE_FLAT_4, D_FLAT_4, D_NATURAL_4, D_SHARP_4, D_DOUBLE_SHARP_4,
	E_DOUBLE_FLAT_4, E_FLAT_4, E_NATURAL_4, E_SHARP_4, E_DOUBLE_SHARP_4,
	F_DOUBLE_FLAT_4, F_FLAT_4, F_NATURAL_4, F_SHARP_4, F_DOUBLE_SHARP_4,
	G_DOUBLE_FLAT_4, G_FLAT_4, G_NATURAL_4, G_SHARP_4, G_DOUBLE_SHARP_4,
	A_DOUBLE_FLAT_4, A_FLAT_4, A_NATURAL_4, A_SHARP_4, A_DOUBLE_SHARP_4,
	B_DOUBLE_FLAT_4, B_FLAT_4, B_NATURAL_4, B_SHARP_4, B_DOUBLE_SHARP_4,
	
	C_DOUBLE_FLAT_5, C_FLAT_5, C_NATURAL_5, C_SHARP_5, C_DOUBLE_SHARP_5,
	D_DOUBLE_FLAT_5, D_FLAT_5, D_NATURAL_5, D_SHARP_5, D_DOUBLE_SHARP_5,
	E_DOUBLE_FLAT_5, E_FLAT_5, E_NATURAL_5, E_SHARP_5, E_DOUBLE_SHARP_5,
	F_DOUBLE_FLAT_5, F_FLAT_5, F_NATURAL_5, F_SHARP_5, F_DOUBLE_SHARP_5,
	G_DOUBLE_FLAT_5, G_FLAT_5, G_NATURAL_5, G_SHARP_5, G_DOUBLE_SHARP_5,
	A_DOUBLE_FLAT_5, A_FLAT_5, A_NATURAL_5, A_SHARP_5, A_DOUBLE_SHARP_5,
	B_DOUBLE_FLAT_5, B_FLAT_5, B_NATURAL_5, B_SHARP_5, B_DOUBLE_SHARP_5,
	
	C_DOUBLE_FLAT_6, C_FLAT_6, C_NATURAL_6, C_SHARP_6, C_DOUBLE_SHARP_6,
	D_DOUBLE_FLAT_6, D_FLAT_6, D_NATURAL_6, D_SHARP_6, D_DOUBLE_SHARP_6,
	E_DOUBLE_FLAT_6, E_FLAT_6, E_NATURAL_6, E_SHARP_6, E_DOUBLE_SHARP_6,
	F_DOUBLE_FLAT_6, F_FLAT_6, F_NATURAL_6, F_SHARP_6, F_DOUBLE_SHARP_6,
	G_DOUBLE_FLAT_6, G_FLAT_6, G_NATURAL_6, G_SHARP_6, G_DOUBLE_SHARP_6,
	A_DOUBLE_FLAT_6, A_FLAT_6, A_NATURAL_6, A_SHARP_6, A_DOUBLE_SHARP_6,
	B_DOUBLE_FLAT_6, B_FLAT_6, B_NATURAL_6, B_SHARP_6, B_DOUBLE_SHARP_6,
	
	C_DOUBLE_FLAT_7, C_FLAT_7, C_NATURAL_7, C_SHARP_7, C_DOUBLE_SHARP_7,
	D_DOUBLE_FLAT_7, D_FLAT_7, D_NATURAL_7, D_SHARP_7, D_DOUBLE_SHARP_7,
	E_DOUBLE_FLAT_7, E_FLAT_7, E_NATURAL_7, E_SHARP_7, E_DOUBLE_SHARP_7,
	F_DOUBLE_FLAT_7, F_FLAT_7, F_NATURAL_7, F_SHARP_7, F_DOUBLE_SHARP_7,
	G_DOUBLE_FLAT_7, G_FLAT_7, G_NATURAL_7, G_SHARP_7, G_DOUBLE_SHARP_7,
	A_DOUBLE_FLAT_7, A_FLAT_7, A_NATURAL_7, A_SHARP_7, A_DOUBLE_SHARP_7,
	B_DOUBLE_FLAT_7, B_FLAT_7, B_NATURAL_7, B_SHARP_7, B_DOUBLE_SHARP_7,
	
	C_DOUBLE_FLAT_8, C_FLAT_8, C_NATURAL_8, C_SHARP_8, C_DOUBLE_SHARP_8,
	D_DOUBLE_FLAT_8, D_FLAT_8, D_NATURAL_8, D_SHARP_8, D_DOUBLE_SHARP_8,
	E_DOUBLE_FLAT_8, E_FLAT_8, E_NATURAL_8, E_SHARP_8, E_DOUBLE_SHARP_8,
	F_DOUBLE_FLAT_8, F_FLAT_8, F_NATURAL_8, F_SHARP_8, F_DOUBLE_SHARP_8,
	G_DOUBLE_FLAT_8, G_FLAT_8, G_NATURAL_8, G_SHARP_8, G_DOUBLE_SHARP_8,
	A_DOUBLE_FLAT_8, A_FLAT_8, A_NATURAL_8, A_SHARP_8, A_DOUBLE_SHARP_8,
	B_DOUBLE_FLAT_8, B_FLAT_8, B_NATURAL_8, B_SHARP_8, B_DOUBLE_SHARP_8,
	
	C_DOUBLE_FLAT_9, C_FLAT_9, C_NATURAL_9, C_SHARP_9, C_DOUBLE_SHARP_9,
	D_DOUBLE_FLAT_9, D_FLAT_9, D_NATURAL_9, D_SHARP_9, D_DOUBLE_SHARP_9,
	E_DOUBLE_FLAT_9, E_FLAT_9, E_NATURAL_9, E_SHARP_9, E_DOUBLE_SHARP_9,
	F_DOUBLE_FLAT_9, F_FLAT_9, F_NATURAL_9, F_SHARP_9, F_DOUBLE_SHARP_9,
	G_DOUBLE_FLAT_9, G_FLAT_9, G_NATURAL_9,
	A_DOUBLE_FLAT_9;

	
	private static final double A4_FREQ = 440;
	private static final byte MIDDLE_C_MIDI_CODE = 60;
	private static final byte A_4_MIDI_CODE = 69;
	
	
	public final PitchClass pitchClass;
	public final int octave;
	private int midiKey;
	
	Pitch() {
		String name = this.name();
		NoteName nn = NoteName.valueOf(name.charAt(0) + "");
		Accidental a = Accidental.valueOf(name.substring(name.indexOf('_') + 1, name.lastIndexOf('_')));
		
		octave = Integer.parseInt(name.substring(name.lastIndexOf('_') + 1).replace('n', '-'));
		pitchClass = PitchClass.getPitchClass(nn, a);
		
		midiKey = MIDDLE_C_MIDI_CODE;		
		if(pitchClass.noteName == NoteName.D) midiKey += 2;
		else if(pitchClass.noteName == NoteName.E) midiKey += 4;
		else if(pitchClass.noteName == NoteName.F) midiKey += 5;
		else if(pitchClass.noteName == NoteName.G) midiKey += 7;
		else if(pitchClass.noteName == NoteName.A) midiKey += 9;
		else if(pitchClass.noteName == NoteName.B) midiKey += 11;
		midiKey += (octave - 4) * 12 + pitchClass.accidental.halfSteps;
	}
	
	public int getMidiKey() {
		return midiKey;
	}

	public double getFrequency() {
		return pitchToFrequency(this);
	}

	public boolean isHigherThan(Pitch pitch) {
		return this.midiKey > pitch.midiKey;
	}

	public boolean isLowerThan(Pitch pitch) {
		return this.midiKey < pitch.midiKey;
	}


	public String toString() {
		return pitchClass.toString() + octave;
	}

   
	public static double pitchToFrequency(Pitch pitch) {
		return A4_FREQ * Math.pow(2d, (pitch.getMidiKey() - A_4_MIDI_CODE)/12d);
    }
    public static double midiKeyToFreq(int midiKey) {
    	return A4_FREQ * Math.pow(2d, (midiKey - A_4_MIDI_CODE)/12d);
    }

	public static Pitch getPitch(PitchClass pc, int octave) {
		return Pitch.valueOf(pc.name() + "_" + Integer.toString(octave).replace('-', 'n'));
	}
}
